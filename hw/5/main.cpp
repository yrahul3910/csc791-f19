#include "Divide.h"
#include "Num.h"
#include "Sym.h"
#include <vector>

int main()
{
    std::cout << "** Nums ** \n\n";
    std::vector<double> x_ = { 0.006718212205620061, 0.042371686846861635, 0.038188730948830706, 0.012753451286971085, 0.02477175435459705, 0.22247455323943693, 0.23257964863613817, 0.23943616755677566, 0.20469297933871175, 0.20141737382610034, 0.4417882551959935, 0.4216383533952527, 0.43811400412289714, 0.40010530266755556, 0.4222693597027401, 0.6360770016170391, 0.6114381110635226, 0.647263534777696, 0.6450713728805741, 0.6015294991516776, 0.8012722930496731, 0.8270706236396749, 0.8469574581389255, 0.8190602118844107, 0.8108299698565307 };
    std::vector<double> y_ = { 0.042211657558271734, 0.0029040787574867947, 0.022169166627303505, 0.04378875936505721, 0.04958122413818507, 0.023308445025757265, 0.02308665415409843, 0.02187810373376886, 0.04596034657377336, 0.02897816145904856, 0.40214897052659093, 0.4837577975662573, 0.45564543226524334, 0.4642294362932446, 0.41859062658947177, 0.8992543412176066, 0.885994652879529, 0.8120889959805807, 0.8332695185360129, 0.8721484407583269, 0.871119176969528, 0.893644058679946, 0.8422106999961416, 0.8830035693274327, 0.8670305566414072 };
    Divide<> div_(x_, y_);
    std::vector<Num> r = div_.get_ranges();

    for (Num& num : r)
        std::cout << "x.n\t" << num.size() << " | x.lo\t" << num.get_low() << " | x.hi\t" << num.get_high() << "\n";

    std::cout << "\n\n** Syms ** \n\n";
    std::vector<double> x = {0.006718212205620061, 0.042371686846861635, 0.038188730948830706, 0.012753451286971085, 0.02477175435459705, 0.22247455323943693, 0.23257964863613817, 0.23943616755677566, 0.20469297933871175, 0.20141737382610034, 0.4417882551959935, 0.4216383533952527, 0.43811400412289714, 0.40010530266755556, 0.4222693597027401, 0.6360770016170391, 0.6114381110635226, 0.647263534777696, 0.6450713728805741, 0.6015294991516776, 0.8012722930496731, 0.8270706236396749, 0.8469574581389255, 0.8190602118844107, 0.8108299698565307, 0.006718212205620061, 0.042371686846861635, 0.038188730948830706, 0.012753451286971085, 0.02477175435459705, 0.22247455323943693, 0.23257964863613817, 0.23943616755677566, 0.20469297933871175, 0.20141737382610034, 0.4417882551959935, 0.4216383533952527, 0.43811400412289714, 0.40010530266755556, 0.4222693597027401, 0.6360770016170391, 0.6114381110635226, 0.647263534777696, 0.6450713728805741, 0.6015294991516776, 0.8012722930496731, 0.8270706236396749, 0.8469574581389255, 0.8190602118844107, 0.8108299698565307, 0.006718212205620061, 0.042371686846861635, 0.038188730948830706, 0.012753451286971085, 0.02477175435459705, 0.22247455323943693, 0.23257964863613817, 0.23943616755677566, 0.20469297933871175, 0.20141737382610034, 0.4417882551959935, 0.4216383533952527, 0.43811400412289714, 0.40010530266755556, 0.4222693597027401, 0.6360770016170391, 0.6114381110635226, 0.647263534777696, 0.6450713728805741, 0.6015294991516776, 0.8012722930496731, 0.8270706236396749, 0.8469574581389255, 0.8190602118844107, 0.8108299698565307, 0.006718212205620061, 0.042371686846861635, 0.038188730948830706, 0.012753451286971085, 0.02477175435459705, 0.22247455323943693, 0.23257964863613817, 0.23943616755677566, 0.20469297933871175, 0.20141737382610034, 0.4417882551959935, 0.4216383533952527, 0.43811400412289714, 0.40010530266755556, 0.4222693597027401, 0.6360770016170391, 0.6114381110635226, 0.647263534777696, 0.6450713728805741, 0.6015294991516776, 0.8012722930496731, 0.8270706236396749, 0.8469574581389255, 0.8190602118844107, 0.8108299698565307, 0.006718212205620061, 0.042371686846861635, 0.038188730948830706, 0.012753451286971085, 0.02477175435459705, 0.22247455323943693, 0.23257964863613817, 0.23943616755677566, 0.20469297933871175, 0.20141737382610034, 0.4417882551959935, 0.4216383533952527, 0.43811400412289714, 0.40010530266755556, 0.4222693597027401, 0.6360770016170391, 0.6114381110635226, 0.647263534777696, 0.6450713728805741, 0.6015294991516776, 0.8012722930496731, 0.8270706236396749, 0.8469574581389255, 0.8190602118844107, 0.8108299698565307};
    std::vector<std::string> y = {"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c"};

    std::map<std::string, double> mins, maxs;

    Divide<Sym<>, std::string> div(x, y);
    std::vector<Sym<>> ranges = div.get_ranges();

    for (Sym<> num : ranges)
    {
        for (int i = 0; i < x.size(); i++)
        {
            if (mins[num.get_mode()] == 0 && y[i] == num.get_mode())
                mins[num.get_mode()] = x[i];
            if (maxs[num.get_mode()] == 0 && y[i] == num.get_mode())
                maxs[num.get_mode()] = x[i];
            if (y[i] == num.get_mode() && x[i] < mins[num.get_mode()])
                mins[num.get_mode()] = x[i];
            if (y[i] == num.get_mode() && x[i] > maxs[num.get_mode()])
                maxs[num.get_mode()] = x[i];
        }

        std::cout << "x.min:\t" << mins[num.get_mode()] << " | x.max:\t";
        std::cout << maxs[num.get_mode()] << " | ";

        std::cout << "y.mode:\t" << num.get_mode() << " | y.ent:\t" << num.SymEnt() << "\n";
    }

    return 0;
}
